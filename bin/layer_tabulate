#!/usr/bin/env ruby
# frozen_string_literal: true

require 'fileutils'

require_relative '../lib/twenty48'
include Twenty48

column_names = %w[
  board_size max_exponent max_depth discount states mean_start_state_value
]
puts column_names.join(',')

VALUES_RECORD_SIZE = 16 # bytes

Dir.glob(Storage::LAYER_VALUES_GLOB).sort.each do |values_path|
  params = Storage.layer_values_params_from_pathname(values_path)
  $stderr.puts [Time.now, params].inspect

  start_states = Twenty48.generate_start_states(board_size: params[:board_size])

  total_states = 0
  total_start_state_value = 0.0
  num_start_states = 0

  LayerPartValuesName.glob(values_path).each do |layer_part_values|
    values_pathname = layer_part_values.in(values_path)
    values_size = File.stat(values_pathname).size
    raise "bad layer size #{values_pathname}" unless
      values_size % VALUES_RECORD_SIZE == 0

    if layer_part_values.sum <= 8
      state_values =
        layer_part_values.read(params[:board_size], folder: values_path)
      state_values.each do |state, value|
        next unless start_states.member?(state)
        # p ['start state', state]
        num_start_states += 1
        total_start_state_value += value
      end
    end

    total_states += values_size / VALUES_RECORD_SIZE
  end

  raise 'start state mismatch' if num_start_states != start_states.size

  mean_start_state_value = total_start_state_value / start_states.size
  values = params.values + [total_states, mean_start_state_value]
  puts values.join(',')
end
