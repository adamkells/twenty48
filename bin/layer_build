#!/usr/bin/env ruby
# frozen_string_literal: true

require 'fileutils'

require_relative '../lib/twenty48'

include Twenty48

DATA_FOLDER = 'data/layer_states'

def build(board_size:, max_exponent:, max_lose_depth:, max_win_depth:,
  max_states:)
  folder = File.join(DATA_FOLDER, Storage.build_basename(
    board_size: board_size,
    max_exponent: max_exponent,
    max_lose_depth: max_lose_depth,
    max_win_depth: max_win_depth
  ))
  FileUtils.mkdir_p folder
  resolver = NativeResolver.create(board_size, max_exponent,
    max_lose_depth: max_lose_depth, max_win_depth: max_win_depth)
  layer_builder = NativeLayerBuilder.create(board_size, folder, resolver)

  layer_builder.build_start_state_layers

  skips = 0
  sum = 2
  while skips < 2
    sum += 2

    layer_pathname = layer_builder.make_layer_pathname(sum)
    unless File.exist?(layer_pathname)
      skips += 1
      next
    end

    skips = 0

    puts format('%s: %d states',
      layer_pathname, File.stat(layer_pathname).size / 8)

    layer_builder.build_layer(sum, 1, max_states)
    layer_builder.build_layer(sum, 2, max_states)
  end
end

build(
  board_size: 2,
  max_exponent: 7,
  max_lose_depth: 0,
  max_win_depth: 0,
  max_states: 1024
)

# build(
#   board_size: 3,
#   max_exponent: 11,
#   max_lose_depth: 0,
#   max_win_depth: 0,
#   max_states: 60 * 1024**2
# )

# build(
#   board_size: 4,
#   max_exponent: 11,
#   max_lose_depth: 0,
#   max_win_depth: 0,
#   max_states: 1.3e9.to_i
# )
