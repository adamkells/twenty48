#!/usr/bin/env ruby
# frozen_string_literal: true

require 'fileutils'

require_relative '../lib/twenty48'

#
# Build a layer model using LayerBuilder.
#
class LayerBuildBin
  include Twenty48

  def build(board_size:, max_exponent:, max_depth:, max_states:)
    data = Data.new(root: Data::ROOT)
    layer_model = data.game.new(
      board_size: board_size,
      max_exponent: max_exponent
    ).layer_model.new(
      max_depth: max_depth
    )

    puts layer_model
    if layer_model.exist?
      puts 'exists; skipping'
      return
    end
    layer_model.mkdir!

    layer_builder = LayerBuilder.new(layer_model, max_states, verbose: true)
    # raise "ulimit -n too low: #{layer_builder.max_files}" if
    #   layer_builder.max_files < 8000
    layer_builder.build_start_state_layers
    layer_builder.build
    # layer_builder.prepare_to_restart_from(340)
    # layer_builder.build(start_layer_sum: 340)
  end
end

#
# 2x2
#
(3..6).each do |max_exponent|
  (0..[1, max_exponent - 1].min).each do |max_depth|
    LayerBuildBin.new.build(
      board_size: 2,
      max_exponent: max_exponent,
      max_depth: max_depth,
      max_states: 16
    )
  end
end

#
# 3x3
#
(3..10).each do |max_exponent|
  (0..[1, max_exponent - 1].min).each do |max_depth|
    LayerBuildBin.new.build(
      board_size: 3,
      max_exponent: max_exponent,
      max_depth: max_depth,
      max_states: 10_000
    )
  end
end

#
# 4x4
#
[3].each do |max_exponent|
  [0, 1].each do |max_depth|
    LayerBuildBin.new.build(
      board_size: 4,
      max_exponent: max_exponent,
      max_depth: max_depth,
      max_states: 1600
    )
  end
end

[4].each do |max_exponent|
  [0, 1].each do |max_depth|
    LayerBuildBin.new.build(
      board_size: 4,
      max_exponent: max_exponent,
      max_depth: max_depth,
      max_states: 1_000_000
    )
  end
end

# [5].each do |max_exponent|
#   [0, 1].each do |max_depth|
#     build(
#       board_size: 4,
#       max_exponent: max_exponent,
#       max_depth: max_depth,
#       max_states: 10_000_000
#     )
#   end
# end

# Estimated batch size for build:
# TOTAL_MEMORY = 8 * 1024**3
# WORKING_MEMORY = (0.8 * TOTAL_MEMORY).ceil
# max_states = (
#   0.25 * LayerBuilder.find_max_successor_states(WORKING_MEMORY)).ceil
# => 53,687,091

# build(
#   board_size: 4,
#   max_exponent: 11,
#   max_depth: 1,
#   max_states: 30_000_000
# )
