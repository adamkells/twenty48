#!/usr/bin/env ruby
# frozen_string_literal: true

require 'csv'

require_relative '../lib/twenty48'
include Twenty48

#
# Count states for the combinatorics blog post summary tables.
#

TotalRow = Struct.new(:board_size, :max_exponent, :total_states) do
  def self.from_row(row)
    new(
      row['board_size'].to_i,
      row['max_exponent'].to_i,
      row['total_states'].to_i
    )
  end

  def self.from_layer_tabulate(row)
    new(row['board_size'].to_i, row['max_exponent'].to_i, row['states'].to_i)
  end

  def same_game(other)
    other.board_size == board_size && other.max_exponent == max_exponent
  end
end

#
# Check the sum for the complete games.
# These are just the layer counts; they don't count win or lose/end states.
#
COMPLETE_GAMES = [[2, (3..6)], [3, (3..11)], [4, (3..6)]].freeze
canonical = []
COMPLETE_GAMES.each do |board_size, max_exponents|
  max_exponents.each do |max_exponent|
    path = Storage.layer_states_pathname(
      board_size: board_size,
      max_exponent: max_exponent,
      max_depth: 0
    )
    total_states = 0
    LayerPartInfoName.glob(path).each do |layer_part_info|
      info_string = File.read(File.join(path, layer_part_info.to_s))
      info = JSON.parse(info_string)
      total_states += info['num_states']
    end

    canonical << TotalRow.new(board_size, max_exponent, total_states)
  end
end

#
# The 2x2 game stops at 6; fill in the rest.
#
total_states_2x2_6_row = canonical.find do |row|
  row.board_size == 2 && row.max_exponent == 6
end
(7..11).each do |max_exponent|
  canonical << TotalRow.new(
    2,
    max_exponent,
    total_states_2x2_6_row.total_states
  )
end

#
# Check the canonical totals above against layer_tabulate.csv, which should
# contain the same counts where available.
#
layer_tabulate = CSV.read('data/layer_tabulate.csv', headers: true).map do |row|
  next unless row['max_depth'] == '0'
  TotalRow.from_layer_tabulate(row)
end.compact

canonical.each do |row|
  other = layer_tabulate.find { |other_row| other_row.same_game(row) }
  next if other.nil?
  next if other.total_states == row.total_states
  p [row, other]
end

layer_tabulate.each do |row|
  other = canonical.find { |other_row| other_row.same_game(row) }
  next if other.nil?
  next if other.total_states == row.total_states
  p [row, other]
end

#
# We also need to add one state for the 'win' state, for fair comparison
# to the combinatorics results. We should only do this where it is
# actually possible to win.
#

canonical.each do |row|
  next if row.board_size == 2 && row.max_exponent > 5
  next if row.board_size == 3 && row.max_exponent > 10
  row.total_states += 1
end

canonical.sort_by! do |row|
  [row.board_size, row.max_exponent]
end

CSV.open('data/combinatorics/canonical.csv', 'w') do |csv|
  csv << %w[board_size max_exponent total_states]
  canonical.each do |row|
    csv << row.to_a
  end
end

#
# Also build the layer dataset.
#

LayerRow = Struct.new(:board_size, :max_exponent, :layer_sum, :num_states)
layers_canonical = []
COMPLETE_GAMES.each do |board_size, max_exponents|
  max_exponents.each do |max_exponent|
    path = Storage.layer_states_pathname(
      board_size: board_size,
      max_exponent: max_exponent,
      max_depth: 0
    )
    infos = LayerPartInfoName.glob(path).group_by(&:sum)
    infos.keys.sort.each do |layer_sum|
      num_states = 0
      infos[layer_sum].each do |layer_part_info|
        info_string = File.read(File.join(path, layer_part_info.to_s))
        info = JSON.parse(info_string)
        num_states += info['num_states']
      end
      layers_canonical << LayerRow.new(
        board_size, max_exponent, layer_sum, num_states
      )
    end
  end
end

# Repeat the 2x2 to 6 results for consistency.
layers_2x2_6 = layers_canonical.select do |row|
  row.board_size == 2 && row.max_exponent == 6
end
(7..11).each do |max_exponent|
  layers_2x2_6.each do |row|
    new_row = row.dup
    new_row.max_exponent = max_exponent
    layers_canonical << new_row
  end
end

layers_canonical.sort_by! do |row|
  [row.board_size, row.max_exponent, row.layer_sum]
end

CSV.open('data/combinatorics/layers_canonical.csv', 'w') do |csv|
  csv << %w[board_size max_exponent layer_sum num_states]
  layers_canonical.each do |row|
    csv << row.to_a
  end
end

#
# Make the main summary table.
#

def read_total_csv(basename)
  pathname = File.join('data/combinatorics', basename)
  CSV.read(pathname, headers: true).map do |row|
    TotalRow.from_row(row)
  end
end

TOTALS = {
  basic: read_total_csv('layers_basic_total.csv'),
  improved: read_total_csv('layers_total.csv'),
  truncated: read_total_csv('layers_truncated_total.csv'),
  reachable: read_total_csv('reachable.csv'),
  canonical: canonical
}.freeze

def number_with_comma(number)
  number.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse
end

def lookup(estimate, board_size, max_exponent)
  result = TOTALS[estimate].find do |row|
    row.board_size == board_size && row.max_exponent == max_exponent
  end
  if result
    number_with_comma(result.total_states)
  else
    '?'
  end
end

BOARD_SIZES = 2..4
MAX_EXPONENTS = 3..11

SUMMARY_TEMPLATE = <<~HTML
  <table>
    <thead>
      <tr>
        <th>Maximum Tile</th>
        <th>Method</th>
        <th colspan="3">Board Size</th>
      </tr>
      <tr>
        <th></th>
        <th></th>
        <th align="right">2x2</th>
        <th align="right">3x3</th>
        <th align="right">4x4</th>
      </tr>
    </thead>
    <tbody>
      <% MAX_EXPONENTS.each do |max_exponent| %>
      <tr>
        <th align="right" valign="top" rowspan="2"><%= 2**max_exponent %></th>
        <td>Baseline</td>
        <% BOARD_SIZES.each do |board_size| %><td align="right"><%= lookup :improved, board_size, max_exponent %></td><% end %>
      </tr>
      <tr>
        <td>Layer Reachability</td>
        <% BOARD_SIZES.each do |board_size| %><td align="right"><%= lookup :truncated, board_size, max_exponent %></td><% end %>
      </tr>
      <% end %>
    </tbody>
  </table>
HTML

File.open('data/combinatorics/summary_table.html', 'w') do |file|
  file.puts ERB.new(SUMMARY_TEMPLATE).result
end
