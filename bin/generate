#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/twenty_48'

def generate(builder)
  model_params = Twenty48::Storage.model_params_from_builder(builder)
  p model_params
  file_name = Twenty48::Storage.model_pathname(model_params, '.json')
  File.open(file_name, 'w') do |file|
    file.puts '{'
    state_count = 0
    builder.build do |state, state_hash|
      state_count += 1
      file.puts ',' if state_count > 1
      file.write %("#{state}": #{JSON.dump(state_hash)})

      puts status_line(state_count, builder) if (state_count % 1000).zero?
    end
    file.puts "\n}"
    puts status_line(state_count, builder)
  end
  system "bzip2 --force #{file_name}"
end

def status_line(state_count, builder)
  format('%s: state_count=%d, ' \
    'open_size=%d, ' \
    'resolve_cache_size=%d, ' \
    'resolve_cache_hit_rate=%.2f%%, ' \
    'expand_cache_size=%d, ' \
    'expand_cache_hit_rate=%.4f%%',
    Time.now.to_s,
    state_count,
    builder.open.size,
    builder.resolve_cache.size,
    100 * builder.resolve_cache.hit_rate,
    builder.expand_cache.size,
    100 * builder.expand_cache.hit_rate)
end

board_size = 2
(2..7).each do |max_exponent|
  (0..[max_exponent - 1, 3].min).each do |max_resolve_depth|
    generate(Twenty48::Builder.new(
      board_size, max_exponent, max_resolve_depth
    ))
  end
end

board_size = 3
(2..4).each do |max_exponent|
  (0..[max_exponent - 1, 2].min).each do |max_resolve_depth|
    generate(Twenty48::Builder.new(
      board_size, max_exponent, max_resolve_depth
    ))
  end
end

# board_size = 4
# (2..4).each do |max_exponent|
#   (0..[max_exponent - 1, 3].min).to_a.reverse.each do |max_resolve_depth|
#     generate(Twenty48::Builder.new(
#       board_size, max_exponent, max_resolve_depth
#     ))
#   end
# end
