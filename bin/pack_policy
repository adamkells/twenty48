#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/twenty48'

#
# Pack data for browser.
#
# The format is a bit weird. It was originally just a CSV, but writing it in
# this weirder format saves bytes over the wire (both with and without gzip).
#
# There are 5 lines, and the delimiter is a single space. The first line starts
# with either 'a' or 'av', to mark whether the file has actions only or both
# actions and values, respectively.
#
# Each subsequent line lists an action by index (0..3), followed by packed
# states, and optionally their values, for which that is the optimal action.
#
# When there are states only (no values), each entry is a base-36 encoded
# difference from the previous state, where the states are written as numbers
# in base-K, where K is the max_exponent (see RadixPack). If the difference is
# 1, which is common, then the number 1 is elided, so there will just be two
# adjacent spaces.
#
# When values are included, each state entry is followed by a value entry, where
# the value is expressed as a percentage. The most common percentage value is
# determined before the data are packed, and all instances are elided, so
# again there will just be two spaces. The most common percentage value is
# included at the end of the header line.
#
class PackPolicyBin
  include Twenty48
  include FileUtils
  include RadixPack

  def run
    data = Data.new(root: Data::ROOT)
    data.game.each do |game|
      next unless include_game?(game)
      game.layer_model.each do |model|
        next unless model.max_depth == 0
        solutions = model.part.first&.solution&.all || []
        solutions.each do |solution|
          next unless solution.alternate_action_tolerance > 0
          next unless game.board_size < 4 && solution.discount == 1 ||
              game.board_size == 4 && solution.discount < 1
          puts solution
          solution.tranche.each do |tranche|
            next unless game.board_size == 2 && tranche.threshold == 0 ||
                game.board_size > 2 && tranche.threshold == 1e-7
            state_action_values = model.read_tranche_state_action_values(
              solution.to_h, tranche.to_h
            )
            build(game, model, solution, tranche, state_action_values, false)
            build(game, model, solution, tranche, state_action_values, true)
          end
        end
      end
    end
  end

  def include_game?(game)
    game.board_size == 2 && game.max_exponent == 3 ||
      game.board_size == 2 && game.max_exponent == 4 ||
      game.board_size == 2 && game.max_exponent == 5 ||
      game.board_size == 3 && game.max_exponent == 9 ||
      game.board_size == 3 && game.max_exponent == 10 ||
      game.board_size == 4 && game.max_exponent == 4 ||
      game.board_size == 4 && game.max_exponent == 6
  end

  def build(game, model, solution, tranche, state_action_values, values)
    packed_policy_dat = model.packed_policy_dat.new(
      solution.to_h.merge(tranche.to_h).merge(values: values)
    )
    unless packed_policy_dat.exist?
      write_packed_policy(
        state_action_values,
        game.max_exponent,
        tranche.alternate_actions,
        values,
        packed_policy_dat.to_s
      )
    end
    print_stats(packed_policy_dat.to_s)
  end

  #
  # Sort the states and store the differences between successive states.
  #
  def with_radix_delta_packing(state_action_values, max_exponent)
    previous = 0
    radix_packed_states = state_action_values.map do |state_action_value|
      state_action_value.radix_packed_state(max_exponent)
    end
    sorted_indexes = (0...state_action_values.size).sort_by do |i|
      radix_packed_states[i]
    end
    sorted_indexes.each do |i|
      state_action_value = state_action_values[i]
      radix_packed_state = radix_packed_states[i]
      delta = radix_packed_state - previous
      raise "delta #{delta} too large for JS" if delta > 2**53 - 1
      yield(delta, state_action_value)
      previous = radix_packed_state
    end
  end

  def pack_actions(state_action_value)
    action = state_action_value.action
    alternate_actions = state_action_value.alternate_actions
    alternate_action_mask = 0
    offset = 0
    (0...4).each do |i|
      next if i == action
      alternate_action_mask |= 1 << offset if alternate_actions[i]
      offset += 1
    end
    action << 3 | alternate_action_mask
  end

  def round_value(value)
    (value * 100).round
  end

  def find_most_common_round_value(state_action_values)
    values = state_action_values.map(&:value).map { |value| round_value(value) }
    values.group_by { |value| value }.values.max_by(&:size).first
  end

  def write_packed_policy(
    state_action_values, max_exponent, _alternate_actions, values, pathname
  )
    grouped_state_action_values = state_action_values.group_by(&:action)
    most_common_round_value = find_most_common_round_value(state_action_values)
    File.open(pathname, 'w') do |output|
      output.puts values ? "av #{most_common_round_value}" : 'a'
      grouped_state_action_values.keys.sort.each do |action|
        action_savs = grouped_state_action_values[action]
        output.write action
        with_radix_delta_packing(action_savs, max_exponent) do |delta, sav|
          if delta == 1 # use a blank for 1, which is very common
            output.write ' '
          else
            output.write " #{delta.to_s(36)}"
          end
          next unless values
          value = round_value(sav.value)
          if value == most_common_round_value # use blank for most common value
            output.write ' '
          else
            output.write " #{value}"
          end
        end
        output.puts
      end
    end
  end

  def print_stats(pathname)
    puts pathname
    puts "Size: #{File.size(pathname)}"
    puts "Size when gzipped: #{gz_size(pathname)}"
  end

  def gz_size(pathname)
    Dir.mktmpdir do |tmp|
      tmp_pathname = File.join(tmp, 'data')
      cp pathname, tmp_pathname
      system "gzip #{tmp_pathname}"
      File.size("#{tmp_pathname}.gz")
    end
  end
end

PackPolicyBin.new.run
