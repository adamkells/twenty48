#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/twenty48'

DISCOUNT = 0.95
TOLERANCE = 1e-6
SOLVE_STRATEGY = :policy_iteration # :value_iteration or :policy_iteration

SOLUTION_PARAMS = {
  discount: DISCOUNT,
  tolerance: TOLERANCE,
  solve_strategy: SOLVE_STRATEGY
}.freeze

#
# Solve an array model.
#
class SolveBin
  include Twenty48

  def solve(model)
    puts 'reading'
    array_model = model.array_bin_bz2.read
    puts 'read'

    solution = model.solution.new(SOLUTION_PARAMS).mkdir!

    solver = FiniteMDP::Solver.new(array_model, DISCOUNT)
    case SOLVE_STRATEGY
    when :policy_iteration then
      solver.policy_iteration(value_tolerance: TOLERANCE) \
      do |num_policy_iters, num_actions_changed, num_value_iters, delta|
        next unless (num_policy_iters + num_value_iters) % 5 == 0
        p [Time.now,
           num_policy_iters, num_actions_changed, num_value_iters, delta]
      end
    when :value_iteration then
      solver.value_iteration(tolerance: TOLERANCE) do |num_iters, delta|
        next unless num_iters % 5 == 0
        p [Time.now, num_iters, delta]
      end
    end

    puts 'DONE'
    CSV.open(solution.solution_csv.to_s, 'w') do |csv|
      csv << %w[state action value]
      policy = solver.policy
      value = solver.value
      policy.keys.sort.each do |state|
        csv << [state, policy[state], value[state]]
      end
    end
    system "bzip2 --force #{solution.solution_csv}"
  end

  def run
    data = Data.new(root: Data::ROOT)
    data.game.each do |game|
      if game.board_size == 3 && game.max_exponent > 7
        puts 'skipped'
        next
      end
      game.model.each do |model|
        next unless model.array_bin_bz2.exist?
        if model.solution.find_by(SOLUTION_PARAMS)
          puts 'exists'
          next
        end
        solve(model)
      end
    end
  end
end

SolveBin.new.run
