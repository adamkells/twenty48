#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/twenty48'

#
# Build the smallest possible MDP model and graph it.
#
class Explore2x2MdpBin
  include Twenty48
  include Twenty48::Dot

  def initialize(max_exponent = 5)
    @max_exponent = max_exponent
  end

  attr_reader :max_exponent

  BOARD_DIGITS = 2

  def make_mdp_model
    data = Data.new(root: Data::ROOT)
    game = data.game.find_by(board_size: 2, max_exponent: max_exponent)
    layer_model = game.layer_model.find_by(max_depth: 0)
    LayerConversion.convert_layers_to_finite_mdp_model(layer_model)
  end

  ARROWS = {
    left: '←',
    right: '→',
    up: '↑',
    down: '↓',
    left_right_up_down: '*'
  }.freeze

  COLORS = { # http://colorbrewer2.org/#type=diverging&scheme=PuOr&n=4
    left: '#e66101',  # dark orange
    right: '#fdb863', # light orange
    up: '#b2abd2',    # light purple
    down: '#5e3c99'   # dark purple
  }.freeze

  def write_single_state_graph_with_no_canonicalization(start, file)
    graph = Graph.new

    node_properties = graph.add_node(node_name(start))
    node_properties[:shape] = :record
    node_properties[:label] = "{#{node_label(start, BOARD_DIGITS)}}"

    DIRECTIONS.each do |direction|
      node_properties = graph.add_node(direction)
      node_properties[:label] = ARROWS[direction]

      edge_properties = graph.add_edge(node_name(start), direction)
      edge_properties[:dir] = :none

      move_state = start.move(direction)
      move_state.to_a.each.with_index do |value, i|
        next unless value.zero?
        State::RANDOM_TILES.each do |new_value, pr|
          new_state_array = move_state.to_a.dup
          new_state_array[i] = new_value
          state = State.new(new_state_array)

          unless graph.node?(node_name(state))
            node_properties = graph.add_node(node_name(state))
            node_properties[:shape] = :record
            node_properties[:label] = "{#{node_label(state, BOARD_DIGITS)}}"
          end

          edge_properties = graph.add_edge(direction, node_name(state))
          edge_properties[:headlabel] =
            format('%.2f    ', pr / move_state.cells_available)
        end
      end
    end

    file.puts 'digraph {'
    file.puts '  bgcolor = transparent;'
    file.puts '  rankdir = LR;'
    file.puts '  ranksep = 1.5;'
    file.puts '  node [fontname="Courier"];'
    file.puts graph.to_dot.map { |line| "  #{line}" }.join("\n")
    file.puts '}'
  end

  def write_single_state_graph_with_state_canonicalization(start, file)
    graph = Graph.new

    start = NativeState.create(start.to_a)
    node_properties = graph.add_node(node_name(start))
    node_properties[:shape] = :record
    node_properties[:label] = "{#{node_label(start, BOARD_DIGITS)}}"

    DIRECTIONS.each.with_index do |direction, action|
      node_properties = graph.add_node(direction)
      node_properties[:label] = ARROWS[direction]

      edge_properties = graph.add_edge(node_name(start), direction)
      edge_properties[:dir] = :none

      start.move(action).random_transitions.each do |state, pr|
        unless graph.node?(node_name(state))
          node_properties = graph.add_node(node_name(state))
          node_properties[:shape] = :record
          node_properties[:label] = "{#{node_label(state, BOARD_DIGITS)}}"
        end

        edge_properties = graph.add_edge(direction, node_name(state))
        edge_properties[:headlabel] = format('%.2f   ', pr)
      end
    end

    file.puts 'digraph {'
    file.puts '  bgcolor = transparent;'
    file.puts '  rankdir = LR;'
    file.puts '  ranksep = 1.5;'
    file.puts '  nodesep = 1;'
    file.puts '  node [fontname="Courier"];'
    file.puts graph.to_dot.map { |line| "  #{line}" }.join("\n")
    file.puts '}'
  end

  def write_single_state_graph_with_action_canonicalization(start, file)
    graph = Graph.new

    node_properties = graph.add_node(node_name(start))
    node_properties[:shape] = :record
    node_properties[:label] = "{#{node_label(start, BOARD_DIGITS)}}"

    feasible_directions = DIRECTIONS.reject do |direction|
      start.move(direction) == start
    end

    each_unique_action(feasible_directions, start) do |direction, action_label|
      node_properties = graph.add_node(direction)
      node_properties[:label] = action_label

      edge_properties = graph.add_edge(node_name(start), direction)
      edge_properties[:dir] = :none

      move_state = NativeState.create(start.move(direction).to_a)
      move_state.random_transitions.each do |state, pr|
        unless graph.node?(node_name(state))
          node_properties = graph.add_node(node_name(state))
          node_properties[:shape] = :record
          node_properties[:label] = "{#{node_label(state, BOARD_DIGITS)}}"
        end

        edge_properties = graph.add_edge(direction, node_name(state))
        edge_properties[:headlabel] = format('%.2f   ', pr)
      end
    end

    file.puts 'digraph {'
    file.puts '  bgcolor = transparent;'
    file.puts '  rankdir = LR;'
    file.puts '  ranksep = 1.5;'
    file.puts '  nodesep = 0.5;'
    file.puts '  node [fontname="Courier"];'
    file.puts graph.to_dot.map { |line| "  #{line}" }.join("\n")
    file.puts '}'
  end

  def each_unique_action(actions, state, policy = nil)
    actions = actions.group_by do |action|
      state.move(action).canonicalize
    end
    actions.each_value do |group_actions|
      next unless policy.nil? || group_actions.member?(policy[state])
      action_name = ARROWS[group_actions.join('_').to_sym] ||
        group_actions.map { |action| ARROWS[action] }.join
      yield(group_actions.first, action_name)
    end
  end

  def set_transition_edge_properties(edge_properties, probability)
    edge_properties[:weight] = (100 * probability).round
    edge_properties[:penwidth] = 1 + probability * 2
    edge_properties[:arrowhead] = :normalodot if probability > 1 - 1e-9
    edge_properties[:tooltip] = format('%.3f', probability)
  end

  def write_full_mdp_graph(file, policy = nil, value = nil)
    start_states = Twenty48.generate_start_states(board_size: 2).map(&:to_a)
    mdp_model = make_mdp_model
    graph = Graph.new

    sum_subgraphs = Hash.new { |h, k| h[k] = [] }
    action_subgraphs = Hash.new { |h, k| h[k] = [] }

    end_name = node_name(State.new([0, 0, 0, 0]))
    mdp_model.states.each do |state|
      node_properties = graph.add_node(node_name(state))
      if state.lose?
        node_properties[:label] = 'end'

        edge_properties = graph.add_edge(node_name(state), end_name)
        set_transition_edge_properties(edge_properties, 1.0)
        next
      elsif state.win?(max_exponent)
        node_properties[:label] = 'win'
        node_properties[:color] = 'green'

        edge_properties = graph.add_edge(node_name(state), end_name)
        set_transition_edge_properties(edge_properties, 1.0)
        next
      else
        sum_subgraphs[state.sum] << node_name(state)
        node_properties[:shape] = :record
        label = "{#{node_label(state, BOARD_DIGITS)}}"
        if value
          label = format('%<label>s|%.3<value>f',
            label: label, value: value[state])
        end
        node_properties[:label] = label
        node_properties[:color] = 'blue' if start_states.member?(state.to_a)
      end

      actions = mdp_model.actions(state)
      each_unique_action(actions, state, policy) do |action, action_label|
        state_action_name = "#{node_name(state)}_#{action}"
        action_subgraphs[node_name(state)] << state_action_name

        node_properties = graph.add_node(state_action_name)
        node_properties[:label] = action_label

        edge_properties = graph.add_edge(node_name(state), state_action_name)
        edge_properties[:dir] = :none

        mdp_model.next_states(state, action).each do |next_state|
          edge_properties = graph.add_edge(
            state_action_name,
            node_name(next_state)
          )
          probability = mdp_model.transition_probability(
            state, action, next_state
          )
          set_transition_edge_properties(edge_properties, probability)
        end
      end
    end

    file.puts 'digraph {'
    file.puts '  bgcolor = transparent;'
    file.puts '  rankdir = LR;'
    file.puts '  nodesep = 0.25;'
    file.puts '  ranksep = 2;'
    file.puts '  node [fontname="Courier"];'
    sum_subgraphs.each do |sum, states|
      file.puts "  subgraph cluster_sum_#{sum} {"
      file.puts "    label = \"sum: #{sum}\";"
      file.puts '    style = filled;'
      file.puts '    color = gray95;'
      file.puts '    margin = 16;'
      states.each do |state|
        file.puts "    subgraph cluster_#{state}_actions {"
        file.puts '      label = "";'
        file.puts '      margin = 8;'
        file.puts "      #{state};"
        file.puts "      #{action_subgraphs[state].join('; ')};"
        file.puts '    }'
      end
      file.puts '  }'
    end
    file.puts graph.to_dot.map { |line| "  #{line}" }.join("\n")
    file.puts '}'
  end

  DISCOUNT = 1.0
  TOLERANCE = 1e-6

  def write_optimal_mdp_graph(file)
    mdp_model = make_mdp_model

    solver = FiniteMDP::Solver.new(mdp_model, DISCOUNT)
    solver.policy_iteration(value_tolerance: TOLERANCE)

    write_full_mdp_graph(file, solver.policy, solver.value)
  end
end

OUTPUT_ROOT = '../jdleesmiller.github.io/assets/2048'

#
# Single state transition diagrams
#

start = Twenty48::State.new([0, 1, 1, 0])
start_name = Twenty48::Dot.node_name(start)
File.open(File.join(OUTPUT_ROOT,
  "/mdp_#{start_name}_with_no_canonicalization.dot"), 'w') do |file|
  Explore2x2MdpBin.new.write_single_state_graph_with_no_canonicalization(
    start, file
  )
end

File.open(File.join(OUTPUT_ROOT,
  "/mdp_#{start_name}_with_state_canonicalization.dot"), 'w') do |file|
  Explore2x2MdpBin.new.write_single_state_graph_with_state_canonicalization(
    start, file
  )
end

File.open(File.join(OUTPUT_ROOT,
  "/mdp_#{start_name}_with_action_canonicalization.dot"), 'w') do |file|
  Explore2x2MdpBin.new.write_single_state_graph_with_action_canonicalization(
    start, file
  )
end

start = Twenty48::State.new([0, 0, 1, 1])
start_name = Twenty48::Dot.node_name(start)
File.open(File.join(OUTPUT_ROOT,
  "/mdp_#{start_name}_with_action_canonicalization.dot"), 'w') do |file|
  Explore2x2MdpBin.new.write_single_state_graph_with_action_canonicalization(
    start, file
  )
end

#
# Full MDP diagrams for 2x2 games
#

[3, 4, 5].each do |max_exponent|
  File.open(File.join(OUTPUT_ROOT,
    "/mdp_2x2_#{max_exponent}.dot"), 'w') do |file|
    Explore2x2MdpBin.new(max_exponent).write_full_mdp_graph(file)
  end
end

#
# Solved MDP diagrams for 2x2 games
#
[3, 4, 5].each do |max_exponent|
  File.open(File.join(OUTPUT_ROOT,
    "/mdp_2x2_#{max_exponent}_optimal.dot"), 'w') do |file|
    Explore2x2MdpBin.new(max_exponent).write_optimal_mdp_graph(file)
  end
end
