#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/twenty48'

#
# Build the 2x2 MDP models and draw them as graphs.
#
# Also produce some subgraphs for my blog post.
#
class Explore2x2MdpBin
  include Twenty48
  include Twenty48::Dot

  def initialize(max_exponent = 5, layers: true, action_grouping: true)
    @max_exponent = max_exponent
    @layers = layers
    @action_grouping = action_grouping
    @lose_state = State.new([0, 0, 0, 0])
    @win_state = State.new([0, 0, 0, max_exponent])
    @start_states = Twenty48.generate_start_states(
      board_size: BOARD_SIZE
    ).map { |native_state| State.new(native_state.to_a) }
  end

  attr_reader :max_exponent
  attr_reader :layers
  attr_reader :action_grouping
  attr_reader :lose_state
  attr_reader :win_state
  attr_reader :start_states

  BOARD_SIZE = 2
  BOARD_DIGITS = 2

  def make_mdp_model
    data = Data.new(root: Data::ROOT)
    game = data.game.find_by(board_size: BOARD_SIZE, max_exponent: max_exponent)
    layer_model = game.layer_model.find_by(max_depth: 0)
    LayerConversion.convert_layers_to_finite_mdp_model(layer_model)
  end

  ActionGroup = Struct.new(:actions, :feasible) do
    def action
      actions.first
    end

    def size
      actions.size
    end

    def port
      actions.join('_') if feasible
    end

    def label
      actions.map { |action| action.to_s[0].upcase }.join('<BR/>')
    end

    def td_attributes
      attributes = {
        BORDER: 1,
        ROWSPAN: size,
        STYLE: :ROUNDED
      }
      attributes[:PORT] = port if port
      attributes
    end

    def make_td
      attributes_string = td_attributes.map do |key, value|
        "#{key}=\"#{value}\""
      end.join(' ')

      text = label
      text = "<FONT COLOR=\"grey\">#{text}</FONT>" unless feasible

      "<TD #{attributes_string}>#{text}</TD>"
    end
  end

  def trivial_group_actions(feasible_actions)
    DIRECTIONS.map do |action|
      ActionGroup.new([action], feasible_actions.member?(action))
    end
  end

  def group_actions(state, feasible_actions)
    return trivial_group_actions(feasible_actions) unless action_grouping
    groups = DIRECTIONS.group_by do |action|
      state.move(action).canonicalize if feasible_actions.member?(action)
    end
    groups.map do |group_state, actions|
      ActionGroup.new(actions, !group_state.nil?)
    end
  end

  def make_action_tds(action_groups)
    action_groups = action_groups.dup
    skip = 0
    Array.new(4) do
      if skip > 0
        skip -= 1
        next
      end
      action_group = action_groups.shift
      skip = action_group.size - 1
      action_group.make_td
    end
  end

  def add_table_state(graph, state, feasible_actions, value = nil)
    cell_labels = node_cell_labels(state, BOARD_DIGITS)
    action_groups = group_actions(state, feasible_actions)
    action_labels = make_action_tds(action_groups)

    value_label = \
      if value
        format('%.3f', value[state])
      else
        '&nbsp;'
      end

    cluster = state.sum if layers
    node_properties = graph.add_node(node_name(state), cluster)
    node_properties[:color] = 'blue' if start_states.member?(state)
    node_properties[:label] = <<~LABEL.chomp
      <TABLE CELLSPACING="0" CELLPADDING="4" BORDER="0">
        <TR>
          <TD COLSPAN="2">&nbsp;</TD>
          #{action_labels[0]}
        </TR>
        <TR>
          <TD BORDER="1">#{cell_labels[0]}</TD>
          <TD BORDER="1">#{cell_labels[1]}</TD>
          #{action_labels[1]}
        </TR>
        <TR>
          <TD BORDER="1">#{cell_labels[2]}</TD>
          <TD BORDER="1">#{cell_labels[3]}</TD>
          #{action_labels[2]}
        </TR>
        <TR>
          <TD COLSPAN="2" BORDER="0">#{value_label}</TD>
          #{action_labels[3]}
        </TR>
      </TABLE>
    LABEL

    action_groups
  end

  def write_single_state_graph_with_no_canonicalization(start, file)
    graph = MultiGraph.new

    feasible_directions = DIRECTIONS.reject do |direction|
      start.move(direction) == start
    end

    add_table_state(graph, start, feasible_directions)

    feasible_directions.each do |direction|
      move_state = start.move(direction)
      move_state.to_a.each.with_index do |value, i|
        next unless value.zero?
        State::RANDOM_TILES.each do |new_value, pr|
          new_state_array = move_state.to_a.dup
          new_state_array[i] = new_value
          state = State.new(new_state_array)

          unless graph.node?(node_name(state))
            node_properties = graph.add_node(node_name(state))
            node_properties[:shape] = :record
            node_properties[:label] = "{#{node_label(state, BOARD_DIGITS)}}"
            if state.win?(max_exponent)
              node_properties[:color] = :green
            elsif state.lose?
              node_properties[:color] = :red
            end
          end

          probability = pr / move_state.cells_available
          edge_properties = graph.add_edge(node_name(start), node_name(state))
          set_transition_edge_properties(edge_properties, probability)
          edge_properties[:tailport] = direction
          edge_properties[:headlabel] = format('%.2f    ', probability)
        end
      end
    end

    file.puts 'digraph {'
    file.puts '  bgcolor = transparent;'
    file.puts '  rankdir = LR;'
    file.puts '  ranksep = 1.5;'
    file.puts '  nodesep = 0.25;'
    file.puts '  node [fontname="Courier"];'
    file.puts graph.to_dot.map { |line| "  #{line}" }.join("\n")
    file.puts '}'
  end

  def write_single_state_graph_with_state_canonicalization(start, file)
    graph = MultiGraph.new

    native_start = NativeState.create(start.to_a)
    add_table_state(graph, start, DIRECTIONS)

    DIRECTIONS.each.with_index do |direction, action|
      native_start.move(action).random_transitions.each do |state, pr|
        unless graph.node?(node_name(state))
          node_properties = graph.add_node(node_name(state))
          node_properties[:shape] = :record
          node_properties[:label] = "{#{node_label(state, BOARD_DIGITS)}}"
        end

        edge_properties = graph.add_edge(node_name(start), node_name(state))
        edge_properties[:tailport] = direction
        edge_properties[:headlabel] = format('%.2f   ', pr)
      end
    end

    file.puts 'digraph {'
    file.puts '  bgcolor = transparent;'
    file.puts '  rankdir = LR;'
    file.puts '  ranksep = 1.5;'
    file.puts '  nodesep = 1.5;'
    file.puts '  node [fontname="Courier"];'
    file.puts graph.to_dot.map { |line| "  #{line}" }.join("\n")
    file.puts '}'
  end

  def write_single_state_graph_with_action_canonicalization(start, file)
    graph = MultiGraph.new

    feasible_directions = DIRECTIONS.reject do |direction|
      start.move(direction) == start
    end

    action_groups = add_table_state(graph, start, feasible_directions)
    action_groups.each do |action_group|
      next unless action_group.feasible
      direction = action_group.action
      move_state = NativeState.create(start.move(direction).to_a)
      move_state.random_transitions.each do |state, pr|
        unless graph.node?(node_name(state))
          node_properties = graph.add_node(node_name(state))
          node_properties[:shape] = :record
          node_properties[:label] = "{#{node_label(state, BOARD_DIGITS)}}"
        end

        edge_properties = graph.add_edge(node_name(start), node_name(state))
        edge_properties[:tailport] = action_group.port
        edge_properties[:headlabel] = format('%.2f   ', pr)
      end
    end

    file.puts 'digraph {'
    file.puts '  bgcolor = transparent;'
    file.puts '  rankdir = LR;'
    file.puts '  ranksep = 1.5;'
    file.puts '  nodesep = 0.5;'
    file.puts '  node [fontname="Courier"];'
    file.puts graph.to_dot.map { |line| "  #{line}" }.join("\n")
    file.puts '}'
  end

  def set_transition_edge_properties(edge_properties, probability)
    edge_properties[:weight] = (100 * probability).round
    edge_properties[:penwidth] = 1 + probability * 2
    edge_properties[:arrowhead] = :normalodot if probability > 1 - 1e-9
    edge_properties[:tooltip] = format('%.3f', probability)
  end

  def write_full_mdp_graph(file, policy = nil, value = nil)
    write_full_mdp_graph_with_model(
      file, make_mdp_model, policy, value
    )
  end

  def add_lose_node(node_properties)
    node_properties[:label] = 'lose'
    node_properties[:style] = :filled
    node_properties[:fillcolor] = :red
  end

  def add_win_node(node_properties)
    node_properties[:label] = 'win'
    node_properties[:shape] = :star
    node_properties[:style] = :filled
    node_properties[:fillcolor] = :green
  end

  def write_full_mdp_graph_with_model(file, model, policy = nil, value = nil,
    ranksep: 2)
    graph = MultiGraph.new

    model.states.each do |state|
      if state.lose?
        node_properties = graph.add_node(node_name(state))
        add_lose_node(node_properties)
        next
      elsif state.win?(max_exponent)
        node_properties = graph.add_node(node_name(state))
        add_win_node(node_properties)
        next
      end

      action_groups = add_table_state(graph, state, model.actions(state), value)
      action_groups.each do |action_group|
        next unless action_group.feasible
        next unless policy.nil? || action_group.actions.member?(policy[state])
        model.next_states(state, action_group.action).each do |next_state|
          edge_properties = graph.add_edge(
            node_name(state),
            node_name(next_state)
          )
          probability = model.transition_probability(
            state, action_group.action, next_state
          )
          set_transition_edge_properties(edge_properties, probability)
          edge_properties[:tailport] = action_group.port
        end
      end
    end

    graph.clusters.each_key do |name|
      graph.cluster_labels[name] = "sum #{name}"
    end

    file.puts 'digraph {'
    file.puts '  bgcolor = transparent;'
    file.puts '  rankdir = LR;'
    file.puts '  nodesep = 0.25;'
    file.puts "  ranksep = #{ranksep};"
    file.puts '  node [fontname="Courier"];'
    file.puts graph.to_dot.map { |line| "  #{line}" }.join("\n")
    file.puts '}'
  end

  DISCOUNT = 1.0
  TOLERANCE = 1e-6

  def write_optimal_mdp_graph(file)
    mdp_model = make_mdp_model

    solver = FiniteMDP::Solver.new(mdp_model, DISCOUNT)
    solver.policy_iteration(value_tolerance: TOLERANCE)

    write_full_mdp_graph(file, solver.policy, solver.value)
  end

  def write_full_mdp_without_canonicalization(file)
    model = build_full_mdp_without_canonicalization
    puts "num states: #{model.states.size}"
    puts "num transitions: #{FiniteMDP::TableModel.from_model(model).rows.size}"
    write_full_mdp_graph_with_model(file, model, ranksep: 20)
  end

  def build_full_mdp_without_canonicalization
    model_hash = build_full_mdp_hash_without_canonicalization
    model_hash = Hash[
      model_hash.keys.sort.map { |state| [state, model_hash[state]] }
    ]
    model = FiniteMDP::HashModel.new(model_hash)
    model.check_transition_probabilities_sum
    raise 'model has terminal states' if model.terminal_states.any?
    model
  end

  def build_full_mdp_hash_without_canonicalization
    model = {}

    model[lose_state] = { down: { lose_state => [1, 0] } }
    model[win_state] = { up: { win_state => [1, 0] } }

    open_states = find_start_states_without_canonicalization
    loop do
      state = open_states.pop
      break unless state
      next if model.key?(state)
      model[state] = expand(state, open_states)
    end

    model
  end

  #
  # Build a complete 2x2 model without state canonicalization.
  #
  def find_start_states_without_canonicalization
    states = []
    lose_state.random_successors.each do |one_tile_state|
      one_tile_state.random_successors.each do |two_tile_state|
        states << two_tile_state
      end
    end
    states
  end

  def expand(state, open_states)
    successors = {}
    DIRECTIONS.each do |direction|
      move_state = state.move(direction)
      next if move_state == state
      if move_state.win?(max_exponent)
        successors[direction] = { win_state => [1, 1] }
        next
      end
      successors[direction] = Hash.new { |h, k| h[k] = [0, 0] }
      cells_available = move_state.cells_available
      move_state.to_a.each.with_index do |value, i|
        next unless value.zero?
        State::RANDOM_TILES.each do |new_value, value_probability|
          new_state_array = move_state.to_a.dup
          new_state_array[i] = new_value
          new_state = State.new(new_state_array)
          if new_state.lose?
            new_state = lose_state
          else
            open_states << new_state
          end
          successors[direction][new_state][0] +=
            value_probability / cells_available
        end
      end
    end
    successors
  end
end

OUTPUT_ROOT = '../jdleesmiller.github.io/assets/2048'

#
# Single state transition diagrams
#

start = Twenty48::State.new([0, 1, 1, 0])
start_name = Twenty48::Dot.node_name(start)
File.open(File.join(OUTPUT_ROOT,
  "/mdp_#{start_name}_with_no_canonicalization.dot"), 'w') do |file|
  bin = Explore2x2MdpBin.new(layers: false, action_grouping: false)
  bin.write_single_state_graph_with_no_canonicalization(start, file)
end

File.open(File.join(OUTPUT_ROOT,
  "/mdp_#{start_name}_with_state_canonicalization.dot"), 'w') do |file|
  bin = Explore2x2MdpBin.new(layers: false, action_grouping: false)
  bin.write_single_state_graph_with_state_canonicalization(start, file)
end

File.open(File.join(OUTPUT_ROOT,
  "/mdp_#{start_name}_with_action_canonicalization.dot"), 'w') do |file|
  bin = Explore2x2MdpBin.new(layers: false)
  bin.write_single_state_graph_with_action_canonicalization(start, file)
end

start = Twenty48::State.new([2, 1, 0, 1])
start_name = Twenty48::Dot.node_name(start)
File.open(File.join(OUTPUT_ROOT,
  "/mdp_#{start_name}_with_no_canonicalization.dot"), 'w') do |file|
  bin = Explore2x2MdpBin.new(3, layers: false, action_grouping: false)
  bin.write_single_state_graph_with_no_canonicalization(start, file)
end

start = Twenty48::State.new([2, 2, 1, 0])
start_name = Twenty48::Dot.node_name(start)
File.open(File.join(OUTPUT_ROOT,
  "/mdp_#{start_name}_with_no_canonicalization.dot"), 'w') do |file|
  bin = Explore2x2MdpBin.new(3, layers: false, action_grouping: false)
  bin.write_single_state_graph_with_no_canonicalization(start, file)
end

start = Twenty48::State.new([0, 0, 1, 1])
start_name = Twenty48::Dot.node_name(start)
File.open(File.join(OUTPUT_ROOT,
  "/mdp_#{start_name}_with_action_canonicalization.dot"), 'w') do |file|
  bin = Explore2x2MdpBin.new(layers: false)
  bin.write_single_state_graph_with_action_canonicalization(start, file)
end

#
# Full MDP diagrams for 2x2 games
#

[3, 4, 5].each do |max_exponent|
  File.open(File.join(OUTPUT_ROOT,
    "/mdp_2x2_#{max_exponent}.dot"), 'w') do |file|
    Explore2x2MdpBin.new(max_exponent).write_full_mdp_graph(file)
  end
end

#
# Solved MDP diagrams for 2x2 games
#
[3, 4, 5].each do |max_exponent|
  File.open(File.join(OUTPUT_ROOT,
    "/mdp_2x2_#{max_exponent}_optimal.dot"), 'w') do |file|
    Explore2x2MdpBin.new(max_exponent).write_optimal_mdp_graph(file)
  end
end

[3].each do |max_exponent|
  File.open(File.join(OUTPUT_ROOT,
    "/mdp_2x2_#{max_exponent}_with_no_canonicalization.dot"), 'w') do |file|
    bin = Explore2x2MdpBin.new(3, action_grouping: false)
    bin.write_full_mdp_without_canonicalization(file)
  end
end
